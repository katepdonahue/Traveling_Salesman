<%= render 'map' %>
<div>
  <%= nested_form_for @trip do |f| %>
    <%= f.fields_for :waypoints do |waypoint_form| %>
      <%= waypoint_form.hidden_field :name, :value => "Start" %>
      <%= waypoint_form.text_field :address, :class => "waypoints", :onchange => "addMarker($(this).val());", :placeholder => "Start"%>
    <% end %>
    <%= f.fields_for :waypoints do |waypoint_form| %>
      <%= waypoint_form.hidden_field :name, :value => "End" %>
      <%= waypoint_form.text_field :address, :class => "waypoints", :onchange => "addMarker($(this).val());", :placeholder => "End" %>
    <% end %>
    <%= f.fields_for :waypoints do |waypoint_form| %>
      <%= waypoint_form.text_field :address, :class => "waypoints", :onchange => "addMarker($(this).val());" %>
        <%= waypoint_form.link_to_remove "-" %>
    <% end %>
    <%= f.link_to_add "+", :waypoints %>
    <br>
    <%= f.submit %>
  <% end %>
</div>
<script type="text/javascript">
  var i = 1;
  var iPrev = 0;
  var tripId;
  var index = 0;
  var cache = new Object();
  var cacheArray = new Array();
  var ajaxHash = new Object();
  function cleanData(funkyHash) {
    jQuery.each(funkyHash, function(localTripId, tripHash) {
      tripId = localTripId;
      jQuery.each(tripHash, function(routeId, routeHash) {
        jQuery.each(routeHash, function(subRouteId, subRouteHash) {
          subRouteHash["transitOptions"]["departureTime"] = new Date(Date.now());
          subRouteHash["travelMode"] = google.maps.TravelMode.TRANSIT;
          cacheArray.push(subRouteHash);
        });
      });
    });
    global1 = funkyHash;
    return funkyHash;
  }

  function cacheResponses(data, callback){
    jQuery.each(data, function(localTripId, tripHash){
      jQuery.each(tripHash, function(routeId, routeHash){
        cache[routeId] = new Object();
        jQuery.each(routeHash, function(subRouteId, subRouteHash){
          return function() {
            if (iPrev != 0){
            iPrev++;
            }
            if (i == 1 && iPrev < 7) {
              cacheArray.shift();
            }
            console.log("routeID:" + routeId + "subrouteID:" + subRouteId + "just before send request");
            sendRequest(routeId, subRouteId, tryAgain);
          }();
        });
      });
    });
    setTimeout(function(){
      callback(postResponses);
    }, 32000);
  }

  var tryAgain = function (routeIdB, subRouteIdB, results) {
    console.log("routeID:" + routeIdB + "subrouteID:" + subRouteIdB + "just inside callback")
    if (results == "OVER_QUERY_LIMIT"){
      console.log("routeID:" + routeIdB + "subrouteID:" + subRouteIdB +"i hit query limit")
      setTimeout(function(){
        i++;
        sendRequest(routeIdB, subRouteIdB, tryAgain);
      }, 2000);
    }
    else {
      console.log("I got a response!");
      console.log(routeIdB + ": " + subRouteIdB);
      cache[routeIdB][subRouteIdB] = results;
      if (iPrev > 12) {
        cacheArray.shift();
      }
      console.log(results);
      i++;
    }


  }

  function sendRequest(routeIdB, subRouteIdB, callback) {
    console.log("routeID:" + routeIdB + "subrouteID:" + subRouteIdB + "inside send request")
    if (i !== iPrev){
      if (iPrev == 0) {
        iPrev++;
      }
      iPrev++;
      return function() {
        directionsService.route(cacheArray[0], function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {
            console.log("routeID:" + routeIdB + "subrouteID:" + subRouteIdB + "just got response from google before calling try again");
            console.log(response["routes"][0]["legs"][0]["end_address"]);
            console.log(response["routes"][0]["legs"][0]["start_address"]);
            callback(routeIdB, subRouteIdB, response);

          } 
          else if (status == "OVER_QUERY_LIMIT") {
            callback(routeIdB, subRouteIdB, status);
          }
          else {
            throw new Error(status);
          }
        });
      }();
    }
  }

  function getAjaxHash(callback) {
    ajaxHash[tripId] = new Object(); 
    jQuery.each(cache, function(routeId, routeHash) {
      ajaxHash[tripId][routeId] = new Object();
      jQuery.each(routeHash, function(subRouteId, subRouteHash) {
        ajaxHash[tripId][routeId][subRouteId] = cache[routeId][subRouteId]["routes"][0]["legs"][0]["duration"]["text"];
      });
    });
    callback();
  }

  function postResponses() {
    var directionsDisplay = [];
    $.post("/trips/ajax", ajaxHash, function(bestRouteId, status){
      $("#directions-panel").show();
      $.each(cache[bestRouteId], function(subRouteId, googleResponse){
        directionsDisplay[index] = new google.maps.DirectionsRenderer();
        directionsDisplay[index].setMap(map);
        directionsDisplay[index].setDirections(googleResponse);
        directionsDisplay[index].setPanel(document.getElementById('directions-panel')); 
        index++;
      });
    });
  }

  $(document).ready(function(){
    $("#directions-panel").hide();
    $("input[type=submit]").on("click", function(e){
      e.preventDefault();
      var data = $(".new_trip").serialize();
      $.post("/trips", data, function(response, status){
        cacheResponses(cleanData(response), getAjaxHash);
      });
    });
  });
</script>
